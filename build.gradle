plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.7'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.1")
	set('testcontainersVersion', '1.19.8')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootBuildImage { // 빌드 팩을 이용해 이미지를 빌드하기 위한 작업 (패키토 사용)
	imageName = "${project.name}" // 버전 지정 안하면 latest로 된다
	environment = ["BP_JVM_VERSION" : "21.*"] // 이미지에 설치할 JVM 버전

	docker { // 컨테이너 저장소 (ex 깃허브 저장소) 연결을 위한 섹션
		publishRegistry { // 컨테이너 저장소 인증을 위한 섹션, gradle 속성을 통해 전달
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
