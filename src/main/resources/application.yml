server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s # 데이터가 전송되지 않는 경우 TCP 연결을 끊기전에 기다리는 시간
  shutdown: graceful

# 최신 버전에서는 mvc와 reactive로 나뉘고, yml 표기 형식이 달라졌다.
spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s # 우아한 종료 기간을 15초로 설정
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false # 설정서버 연결 실패를 치명적 오류로 인식
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    gateway:
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
          - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
          - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args: # 서킷브레이커에 정의한 폴백이 없음
                name: orderCircuitBreaker
      httpclient: # http 클라이언트에 대한 설정
        connect-timeout: 2000 # 연결 수립까지 타임아웃 (ms)
        response-timeout: 5s # 응답 받을때 까지 타임아웃 시간
        pool:
          type: elastic # 연결 풀 유형
          max-idle-time: 15s # 통신 채널이 닫히기 전 대기하는 시간
          max-life-time: 60s # 통신 채널이 열려있는 기간
      default-filters:
        - SaveSession # 요청을 서비스로 전달하기전에 세션 데이터 저장
        - name: Retry
          args:
            retries: 5
            methods: GET # GET 요청만 재시도 (세션에 저장하고 이거 때문에 헤더에 계속 추가됨)
            series: SERVER_ERROR # 500번대 오류만 재시도
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff: # 재시도는 firstBackOff * (factor^n)으로 계산
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10 # 초당 버킷에 떨어지는 토큰의 수
              burstCapacity: 20 # 최대 20개 요청까지 허용
              requestedTokens: 1 # 하나의 요청에 몇 개의 토큰이 사용되는지 지정
  data:
    redis:
      connect-timeout: 2s
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: 6379
      timeout: 1s
  session:
    #    store-type: redis # 레디스를 사용하도록 설정 (3.0 이상에서 제거)
    timeout: 10m # 세션에 대한 타임아웃 default=10
    redis:
      namespace: polar:edge # 모든 세션 데이터 앞에 붙일 고유한 네임스페이스

resilience4j:
  circuitbreaker:
    configs:
      default: # 서킷브레이커에 대한 기본 설정
        slidingWindowSize: 20 # 회로가 폐쇄된 상태일 때 결과를 기록하는 슬라이딩 윈도 크기 (폐쇄일때가 정상상태임)
        permittedNumberOfCallsInHalfOpenState: 5 # 회로가 반개방 상태일때 허용되는 호출 수
        failureRateThreshold: 50 # 실패율이 임계값 이상이면 회로는 개방상태가 된다
        waitDurationInOpenState: 15000 # 개방 상태에서 반개방 상태로 가기까지 기다릴 시간 (ms)
  timelimiter:
    configs:
      default: # 모든 시간 제한에 대한 기본 설정 (가장 우선순위가 높다. ex - httpclient.response-timeout)
        timeoutDuration: 5s


logging:
  level:
    io.github.resilience4j: DEBUG